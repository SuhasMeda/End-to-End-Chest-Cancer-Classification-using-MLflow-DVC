  stages:
  - integration
  - build
  - deploy

variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_REGION: $AWS_REGION
  ECR_REPOSITORY: $ECR_REPOSITORY
  IMAGE_TAG: latest

integration:
  tags: 
    - novadev-mlflow

  stage: integration
  image: ubuntu:latest
  script:
    - echo "Linting repository"
    - echo "Running unit tests"
  only:
    - mldevops_dvc_mlflow_cicd_pipeline
  

build:
  tags: 
    - novadev-mlflow
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Install AWS CLI and other dependencies
    # - apt-get update && apt-get install -y awscli jq unzip
    # Login to AWS ECR
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password $AWS_ECR_LOGIN_URI
  script:
    - docker build -t $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG .
    - docker push $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG
  only:
    - mldevops_dvc_mlflow_cicd_pipeline

deploy:
  tags: 
    - novadev-mlflow
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Login to AWS ECR
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password $AWS_ECR_LOGIN_URI
  script:
    - docker pull $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG
    # Stop and remove the old container if it exists
    - docker stop cnncls || true
    - docker rm cnncls || true
    # Run the new Docker container
    - docker run -d -p 8080:8080 --name=cnncls -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_REGION=$AWS_REGION $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY:$IMAGE_TAG
    # Clean up unused Docker images and containers
    - docker system prune -f
  only:
    - mldevops_dvc_mlflow_cicd_pipeline
